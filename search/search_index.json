{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<ul> <li>Documentation for low level design implementations of various systems and components.</li> <li>Code Repository</li> <li>Personal Portfolio</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>parking_lot<ul> <li>src<ul> <li>main</li> <li>panel</li> <li>parking_lot</li> <li>parking_spot</li> <li>parking_spot_strategy</li> <li>parking_ticket</li> <li>vehicle</li> </ul> </li> <li>tests<ul> <li>test_parkinglot</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/parking_lot/src/main/","title":"main","text":"<p>Module: Parking Lot Application.</p>"},{"location":"reference/parking_lot/src/main/#parking_lot.src.main.parking_lot_app","title":"<code>parking_lot_app(num_entrance_panels=2, num_exit_panels=2, num_display_boards=1, find_parking_spot_strategy='nearest')</code>","text":"<p>Initialize parking lot app.</p> <p>Parameters:</p> Name Type Description Default <code>num_entrance_panels</code> <code>int</code> <p>Number of entrance panels</p> <code>2</code> <code>num_exit_panels</code> <code>int</code> <p>Number of exit panels</p> <code>2</code> Source code in <code>parking_lot/src/main.py</code> <pre><code>@app.command()\ndef parking_lot_app(\n    num_entrance_panels: Annotated[\n        int, typer.Argument(help=\"Number of entrance panels\")\n    ] = 2,\n    num_exit_panels: Annotated[\n        int, typer.Argument(help=\"Number of entrance panels\")\n    ] = 2,\n    num_display_boards: Annotated[\n        int, typer.Argument(help=\"Number of dispaly boards\")\n    ] = 1,\n    find_parking_spot_strategy: Annotated[\n        str,\n        typer.Argument(\n            help=\"first: Find first free spot, nearest: Find nearest free spot to entrance\"\n        ),\n    ] = \"nearest\",\n):\n    \"\"\"\n    Initialize parking lot app.\n\n    Args:\n        num_entrance_panels (int): Number of entrance panels\n        num_exit_panels (int): Number of exit panels\n    \"\"\"\n\n    parking_spot_counts = {\n        ParkingSpotType.MOTORBIKE: 50,\n        ParkingSpotType.COMPACT: 25,\n        ParkingSpotType.LARGE: 15,\n        ParkingSpotType.HANDICAPPED: 5,\n    }\n\n    parking_spot_rates_per_sec = {\n        ParkingSpotType.MOTORBIKE: 0.0025,\n        ParkingSpotType.COMPACT: 0.005,\n        ParkingSpotType.LARGE: 0.01,\n        ParkingSpotType.HANDICAPPED: 0.002,\n    }\n\n    vehicle_spot_type_mapping = {\n        VehicleType.CAR: ParkingSpotType.COMPACT,\n        VehicleType.TRUCK: ParkingSpotType.LARGE,\n        VehicleType.MOTORBIKE: ParkingSpotType.MOTORBIKE,\n    }\n\n    # Create singleton instance of Parking Lot\n    parking_lot = ParkingLot(\n        num_entrance_panels,\n        num_exit_panels,\n        num_display_boards,\n        parking_spot_counts,\n        parking_spot_rates_per_sec,\n        vehicle_spot_type_mapping,\n        find_parking_spot_strategy,\n    )\n\n    # Create vehicles\n    car1 = Car(vehicle_id=1)\n    car2 = Car(vehicle_id=2)\n\n    def park_one_vehicle(args):\n        entrance_panel_id, vehicle = args\n        vehicle_id = vehicle.vehicle_id\n        vechicle_type = vehicle.vehicle_type\n        logger.info(\n            f\" Vehicle of type: {vechicle_type} with ID: {vehicle_id} arrived at entrance panel with id: {entrance_panel_id} \"\n        )\n        parking_lot.handle_vehicle_entrance(\n            entrance_panel_id=entrance_panel_id, vehicle=vehicle\n        )\n\n    def exit_one_vehicle(args):\n        exit_panel_id, vehicle = args\n        vehicle_id = vehicle.vehicle_id\n        vechicle_type = vehicle.vehicle_type\n        logger.info(\n            f\" Vehicle of type: {vechicle_type} with ID: {vehicle_id} exiting at exit panel with id: {exit_panel_id} \"\n        )\n        parking_lot.handle_vehicle_exit(exit_panel_id=exit_panel_id, vehicle=vehicle)\n\n    with futures.ThreadPoolExecutor() as executor:\n        _ = executor.map(park_one_vehicle, [(0, car1), (1, car2)])\n        time.sleep(3)\n        _ = executor.map(exit_one_vehicle, [(0, car1), (1, car2)])\n</code></pre>"},{"location":"reference/parking_lot/src/panel/","title":"panel","text":"<p>Module: Entrance, Exit Panels.</p>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.DisplayBoard","title":"<code>DisplayBoard</code>","text":"<p>Class:Display board.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>class DisplayBoard:\n    \"\"\"Class:Display board.\"\"\"\n\n    def __init__(self, board_id: int):\n        \"\"\"Initialize display board instance.\"\"\"\n        self._board_id = board_id\n\n    def update_num_free_spot_counts(self, num_free_spots):\n        \"\"\"Update count of free spots.\"\"\"\n        logger.info(f\"DisplayBoard{self._board_id}: \")\n        for spot_type, free_spots in num_free_spots.items():\n            logger.info(f\"{spot_type}: {free_spots} free spots available.\")\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.DisplayBoard.__init__","title":"<code>__init__(board_id)</code>","text":"<p>Initialize display board instance.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def __init__(self, board_id: int):\n    \"\"\"Initialize display board instance.\"\"\"\n    self._board_id = board_id\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.DisplayBoard.update_num_free_spot_counts","title":"<code>update_num_free_spot_counts(num_free_spots)</code>","text":"<p>Update count of free spots.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def update_num_free_spot_counts(self, num_free_spots):\n    \"\"\"Update count of free spots.\"\"\"\n    logger.info(f\"DisplayBoard{self._board_id}: \")\n    for spot_type, free_spots in num_free_spots.items():\n        logger.info(f\"{spot_type}: {free_spots} free spots available.\")\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.EntrancePanel","title":"<code>EntrancePanel</code>","text":"<p>Class: Entrance Panel.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>class EntrancePanel:\n    \"\"\"Class: Entrance Panel.\"\"\"\n\n    def __init__(self, panel_id: int):\n        \"\"\"Initialize entrance panel instance.\"\"\"\n        self._panel_id = panel_id\n\n    def issue_ticket(\n        self, vehicle: Vehicle, parking_spot: ParkingSpot\n    ) -&gt; ParkingTicket:\n        \"\"\"Issue ticket to vehicle.\"\"\"\n        parking_ticket = ParkingTicket(\n            ticket_id=uuid4(),\n            entrance_id=self._panel_id,\n            spot_id=parking_spot.spot_id,\n            spot_type=parking_spot.spot_type,\n            vehicle_id=vehicle.vehicle_id,\n            vehicle_type=vehicle.vehicle_type,\n            issued_at=datetime.now(),\n            paid_at=None,\n            exit_id=None,\n            status=ParkingTicketStatus.UNPAID,\n            paid_amount=None,\n        )\n        return parking_ticket\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.EntrancePanel.__init__","title":"<code>__init__(panel_id)</code>","text":"<p>Initialize entrance panel instance.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def __init__(self, panel_id: int):\n    \"\"\"Initialize entrance panel instance.\"\"\"\n    self._panel_id = panel_id\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.EntrancePanel.issue_ticket","title":"<code>issue_ticket(vehicle, parking_spot)</code>","text":"<p>Issue ticket to vehicle.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def issue_ticket(\n    self, vehicle: Vehicle, parking_spot: ParkingSpot\n) -&gt; ParkingTicket:\n    \"\"\"Issue ticket to vehicle.\"\"\"\n    parking_ticket = ParkingTicket(\n        ticket_id=uuid4(),\n        entrance_id=self._panel_id,\n        spot_id=parking_spot.spot_id,\n        spot_type=parking_spot.spot_type,\n        vehicle_id=vehicle.vehicle_id,\n        vehicle_type=vehicle.vehicle_type,\n        issued_at=datetime.now(),\n        paid_at=None,\n        exit_id=None,\n        status=ParkingTicketStatus.UNPAID,\n        paid_amount=None,\n    )\n    return parking_ticket\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.ExitPanel","title":"<code>ExitPanel</code>","text":"<p>Class: Exit Panel.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>class ExitPanel:\n    \"\"\"Class: Exit Panel.\"\"\"\n\n    def __init__(self, panel_id: int):\n        \"\"\"Initialize exit panel instance.\"\"\"\n        self._panel_id = panel_id\n\n    def scan_ticket(self, ticket: ParkingTicket, rates):\n        \"\"\"Scan ticket at exit.\"\"\"\n        current_timestamp = datetime.now()\n        seconds_elapsed = (current_timestamp - ticket.issued_at).seconds\n        total_amount = rates[ticket.spot_type] * seconds_elapsed\n\n        # Accept payment and update ticket payment status\n        ticket.paid_at = current_timestamp\n        ticket.exit_id = self._panel_id\n        ticket.status = ParkingTicketStatus.PAID\n        ticket.paid_amount = total_amount\n\n        return ticket\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.ExitPanel.__init__","title":"<code>__init__(panel_id)</code>","text":"<p>Initialize exit panel instance.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def __init__(self, panel_id: int):\n    \"\"\"Initialize exit panel instance.\"\"\"\n    self._panel_id = panel_id\n</code></pre>"},{"location":"reference/parking_lot/src/panel/#parking_lot.src.panel.ExitPanel.scan_ticket","title":"<code>scan_ticket(ticket, rates)</code>","text":"<p>Scan ticket at exit.</p> Source code in <code>parking_lot/src/panel.py</code> <pre><code>def scan_ticket(self, ticket: ParkingTicket, rates):\n    \"\"\"Scan ticket at exit.\"\"\"\n    current_timestamp = datetime.now()\n    seconds_elapsed = (current_timestamp - ticket.issued_at).seconds\n    total_amount = rates[ticket.spot_type] * seconds_elapsed\n\n    # Accept payment and update ticket payment status\n    ticket.paid_at = current_timestamp\n    ticket.exit_id = self._panel_id\n    ticket.status = ParkingTicketStatus.PAID\n    ticket.paid_amount = total_amount\n\n    return ticket\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/","title":"parking_lot","text":"<p>Module: Parking Lot.</p>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot","title":"<code>ParkingLot</code>","text":"<p>Class: Parking Lot.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>class ParkingLot:\n    \"\"\"Class: Parking Lot.\"\"\"\n\n    def __init__(\n        self,\n        num_entrance_panels,\n        num_exit_panels,\n        num_display_boards,\n        parking_spot_counts,\n        parking_spot_rates_per_sec,\n        vehicle_spot_type_mapping,\n        find_parking_spot_strategy,\n    ):\n        \"\"\"Initialize Parking Lot instance.\"\"\"\n        self._entrance_panels = {}\n        self._exit_panels = {}\n        self._display_boards = {}\n\n        # Add entrance panels, exit panels, display boards\n        self.add_entrance_panels(num_entrance_panels)\n        self.add_exit_panels(num_exit_panels)\n        self.add_display_boards(num_display_boards)\n\n        # Add parking spots\n        self._spots_free = defaultdict()\n        self._spots_occupied = defaultdict()\n        self._num_free_spots = defaultdict(int)\n        self.add_parking_spots(parking_spot_counts)\n\n        self._vehicle_spot_type_mapping = vehicle_spot_type_mapping\n        self._rates_per_sec = parking_spot_rates_per_sec\n        # Store all tickets for downstream analytics\n        self._tickets = defaultdict(ParkingTicket)\n\n        self._lock = threading.Lock()\n\n        # Initializing strategis is done in a separate thread\n        self._parking_spot_counts = parking_spot_counts\n        self._find_parking_spot_strategy = find_parking_spot_strategy\n        self._init_find_parking_spot_strategies()\n\n        logger.info(\"***** Initialize Parking Lot with Settings *****\")\n        logger.info(f\" Number of entrance panels: {len(self._entrance_panels)}\")\n        logger.info(f\" Number of exit panels: {len(self._exit_panels)}\")\n        logger.info(f\" Number of display boards: {len(self._display_boards)}\")\n        for spot_type, num_spots in self._num_free_spots.items():\n            logger.info(f\"{spot_type}: {num_spots} total spots available.\")\n        logger.info(f\" Find parking spot strategy: {self._find_parking_spot_strategy}\")\n        for spot_type, spot_rate in self._rates_per_sec.items():\n            logger.info(f\"{spot_type}: {spot_rate} unit per sec.\")\n        logger.info(\"************************************************\")\n\n    def _init_find_parking_spot_strategies(self):\n        with futures.ThreadPoolExecutor(max_workers=4) as executor:\n            futures_map = {}  # Map&lt;Strategy, Future&gt;\n            futures_map[\"first\"] = executor.submit(FindRandomSpotStrategy)\n            futures_map[\"nearest\"] = executor.submit(\n                FindNearestSpotStrategy,\n                self._entrance_panels,\n                self._spots_free,\n                self._parking_spot_counts,\n            )\n\n            futures.as_completed(futures_map)\n\n            self._find_parking_spot_strategies = {}  # Map&lt;Strategy, strategy instance&gt;\n            # Iterate over futures as result becomes available\n            for strategy, future in futures_map.items():\n                self._find_parking_spot_strategies[strategy] = future.result()\n\n            self._find_parking_spot_strategy = self._find_parking_spot_strategies[\n                self._find_parking_spot_strategy\n            ]\n\n        return\n\n    def add_parking_spots(self, parking_spot_counts: dict[ParkingSpotType, int]):\n        \"\"\"Add parking spots of different types.\"\"\"\n        acc_num_spots = 0\n        for spot_type, num_spots in parking_spot_counts.items():\n            self._spots_free[spot_type] = {}\n\n            for i in range(num_spots):\n                spot_id = acc_num_spots + i\n                self._spots_free[spot_type][spot_id] = ParkingSpot(\n                    floor=0, spot_id=spot_id, spot_type=spot_type\n                )\n\n            self._spots_occupied[spot_type] = {}\n            self._num_free_spots[spot_type] = num_spots\n            acc_num_spots += num_spots\n\n    def add_entrance_panels(self, num_entrance_panels: int):\n        \"\"\"Add entrance panels.\"\"\"\n        for i in range(num_entrance_panels):\n            self._entrance_panels[i] = EntrancePanel(panel_id=i)\n\n    def add_exit_panels(self, num_exit_panels: int):\n        \"\"\"Add exit panel.\"\"\"\n        for i in range(num_exit_panels):\n            self._exit_panels[i] = ExitPanel(panel_id=i)\n\n    def add_display_boards(self, num_display_boards: int):\n        \"\"\"Add display boards.\"\"\"\n        for i in range(num_display_boards):\n            self._display_boards[i] = DisplayBoard(board_id=i)\n\n    def notify_display_boards(self):\n        \"\"\"Update display boards with number of free spot counts.\"\"\"\n        for i in range(len(self._display_boards)):\n            self._display_boards[i].update_num_free_spot_counts(self._num_free_spots)\n\n    def get_parking_spot(\n        self, entrance_panel_id: int, spot_type: ParkingSpotType, vehicle: Vehicle\n    ) -&gt; None | ParkingSpot:\n        \"\"\"Find parking spot\n        Args:\n            entrance_panel_id (int): Unique ID of entrance panel\n            spot_type (Enum): ParkingSpotType\n            vehicle (Vehicle): Instance of vehicle class\n        Returns:\n            parking_spot (None | ParkingSpot)\n        \"\"\"\n        parking_spot = None\n\n        # Acquire lock\n        with self._lock:\n            # If parking spots for this vehicle type is full, return None (no ticket assigned)\n            if not self._num_free_spots[spot_type]:\n                logger.info(f\"Parking Spots for {vehicle.vehicle_type} are full\")\n                return parking_spot\n\n            \"\"\"Get parking spot.\"\"\"\n            spot_id = self._find_parking_spot_strategy.find_parking_spot(\n                entrance_panel_id, spot_type, self._spots_free[spot_type]\n            )\n\n            # Get the parking spot for this spot_id\n            parking_spot = self._spots_free[spot_type][spot_id]\n            # Assign vehicle to this spot\n            parking_spot.assign_vehicle(vehicle=vehicle)\n\n            # Remove this spot from free spots and add it to occupied spots\n            self._spots_free[spot_type].pop(spot_id)\n            self._spots_occupied[spot_type][spot_id] = parking_spot\n            self._num_free_spots[spot_type] -= 1\n        # Release lock\n\n        return parking_spot\n\n    def handle_vehicle_entrance(\n        self, entrance_panel_id: int, vehicle: Vehicle\n    ) -&gt; ParkingTicket | None:\n        logger.info(\n            f\"Vehicle: Type: {vehicle.vehicle_type}, Vehicle ID: {vehicle.vehicle_id} at entrance panel id:{entrance_panel_id}\"\n        )\n        \"\"\"Handle vehicle at entrance panel.\"\"\"\n        if entrance_panel_id &gt;= len(self._entrance_panels):\n            raise ValueError(\"entrance_panel_id is out of bounds\")\n\n        # Get the mapping to appropriate parking spot type for this vehicle\n        spot_type = self._vehicle_spot_type_mapping[vehicle.vehicle_type]\n\n        # Get parking spot for current vehicle\n        parking_spot = self.get_parking_spot(entrance_panel_id, spot_type, vehicle)\n\n        # If parking spots for this vehicle type is full, return None (no ticket assigned)\n        if not parking_spot:\n            return None\n\n        logger.info(f\"Assigned {spot_type} with id:{parking_spot.spot_id}\")\n\n        # Issue ticket\n        parking_ticket = self._entrance_panels[entrance_panel_id].issue_ticket(\n            vehicle=vehicle, parking_spot=parking_spot\n        )\n        # Assign ticket to vehicle\n        vehicle.ticket = parking_ticket\n\n        logger.info(\n            f\"Ticket assigned, ID:{parking_ticket.ticket_id} at {parking_ticket.issued_at}\"\n        )\n\n        # Updating display boards with latest counts\n        self.notify_display_boards()\n\n        return parking_ticket\n\n    def handle_vehicle_exit(\n        self,\n        exit_panel_id: int,\n        vehicle: Vehicle,\n    ):\n        \"\"\"Handle vehicle's exit\n        Scan Ticket\n        Accept Payment.\n        \"\"\"\n\n        if exit_panel_id &gt;= len(self._exit_panels):\n            raise ValueError(\"exit_panel_id is out of bounds\")\n\n        # Scan ticket and handle payment\n        ticket = self._exit_panels[exit_panel_id].scan_ticket(\n            ticket=vehicle.ticket, rates=self._rates_per_sec\n        )\n        # Save ticket (in DB) for downstream analytics\n        self._tickets[ticket.ticket_id] = ticket\n\n        logger.info(\n            f\"Vehicle: Type: {ticket.vehicle_type}, Vehicle ID: {ticket.vehicle_id} at exit panel id:{exit_panel_id}\"\n        )\n\n        # Acquire lock\n        with self._lock:\n            # Remove this spot from occupied spots and add it to free spots\n            spot_id = ticket.spot_id\n            spot_type = ticket.spot_type\n            parking_spot = self._spots_occupied[spot_type][spot_id]\n            self._spots_occupied[spot_type].pop(spot_id)\n            self._spots_free[spot_type][spot_id] = parking_spot\n            self._num_free_spots[spot_type] += 1\n            self.notify_display_boards()\n\n            # Update list of free spots in find parking spot strategies\n            self._find_parking_spot_strategy.update_parking_spot(spot_id, spot_type)\n        # Release lock\n\n        logger.info(f\"Spot freed: {ticket.spot_type} with id:{ticket.spot_id}\")\n        logger.info(\n            f\"Ticket scanned, ID:{ticket.ticket_id}. Payment of {ticket.paid_amount} handled at {ticket.paid_at}\"\n        )\n\n        return\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.__init__","title":"<code>__init__(num_entrance_panels, num_exit_panels, num_display_boards, parking_spot_counts, parking_spot_rates_per_sec, vehicle_spot_type_mapping, find_parking_spot_strategy)</code>","text":"<p>Initialize Parking Lot instance.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def __init__(\n    self,\n    num_entrance_panels,\n    num_exit_panels,\n    num_display_boards,\n    parking_spot_counts,\n    parking_spot_rates_per_sec,\n    vehicle_spot_type_mapping,\n    find_parking_spot_strategy,\n):\n    \"\"\"Initialize Parking Lot instance.\"\"\"\n    self._entrance_panels = {}\n    self._exit_panels = {}\n    self._display_boards = {}\n\n    # Add entrance panels, exit panels, display boards\n    self.add_entrance_panels(num_entrance_panels)\n    self.add_exit_panels(num_exit_panels)\n    self.add_display_boards(num_display_boards)\n\n    # Add parking spots\n    self._spots_free = defaultdict()\n    self._spots_occupied = defaultdict()\n    self._num_free_spots = defaultdict(int)\n    self.add_parking_spots(parking_spot_counts)\n\n    self._vehicle_spot_type_mapping = vehicle_spot_type_mapping\n    self._rates_per_sec = parking_spot_rates_per_sec\n    # Store all tickets for downstream analytics\n    self._tickets = defaultdict(ParkingTicket)\n\n    self._lock = threading.Lock()\n\n    # Initializing strategis is done in a separate thread\n    self._parking_spot_counts = parking_spot_counts\n    self._find_parking_spot_strategy = find_parking_spot_strategy\n    self._init_find_parking_spot_strategies()\n\n    logger.info(\"***** Initialize Parking Lot with Settings *****\")\n    logger.info(f\" Number of entrance panels: {len(self._entrance_panels)}\")\n    logger.info(f\" Number of exit panels: {len(self._exit_panels)}\")\n    logger.info(f\" Number of display boards: {len(self._display_boards)}\")\n    for spot_type, num_spots in self._num_free_spots.items():\n        logger.info(f\"{spot_type}: {num_spots} total spots available.\")\n    logger.info(f\" Find parking spot strategy: {self._find_parking_spot_strategy}\")\n    for spot_type, spot_rate in self._rates_per_sec.items():\n        logger.info(f\"{spot_type}: {spot_rate} unit per sec.\")\n    logger.info(\"************************************************\")\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.add_display_boards","title":"<code>add_display_boards(num_display_boards)</code>","text":"<p>Add display boards.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def add_display_boards(self, num_display_boards: int):\n    \"\"\"Add display boards.\"\"\"\n    for i in range(num_display_boards):\n        self._display_boards[i] = DisplayBoard(board_id=i)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.add_entrance_panels","title":"<code>add_entrance_panels(num_entrance_panels)</code>","text":"<p>Add entrance panels.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def add_entrance_panels(self, num_entrance_panels: int):\n    \"\"\"Add entrance panels.\"\"\"\n    for i in range(num_entrance_panels):\n        self._entrance_panels[i] = EntrancePanel(panel_id=i)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.add_exit_panels","title":"<code>add_exit_panels(num_exit_panels)</code>","text":"<p>Add exit panel.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def add_exit_panels(self, num_exit_panels: int):\n    \"\"\"Add exit panel.\"\"\"\n    for i in range(num_exit_panels):\n        self._exit_panels[i] = ExitPanel(panel_id=i)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.add_parking_spots","title":"<code>add_parking_spots(parking_spot_counts)</code>","text":"<p>Add parking spots of different types.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def add_parking_spots(self, parking_spot_counts: dict[ParkingSpotType, int]):\n    \"\"\"Add parking spots of different types.\"\"\"\n    acc_num_spots = 0\n    for spot_type, num_spots in parking_spot_counts.items():\n        self._spots_free[spot_type] = {}\n\n        for i in range(num_spots):\n            spot_id = acc_num_spots + i\n            self._spots_free[spot_type][spot_id] = ParkingSpot(\n                floor=0, spot_id=spot_id, spot_type=spot_type\n            )\n\n        self._spots_occupied[spot_type] = {}\n        self._num_free_spots[spot_type] = num_spots\n        acc_num_spots += num_spots\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.get_parking_spot","title":"<code>get_parking_spot(entrance_panel_id, spot_type, vehicle)</code>","text":"<p>Find parking spot Args:     entrance_panel_id (int): Unique ID of entrance panel     spot_type (Enum): ParkingSpotType     vehicle (Vehicle): Instance of vehicle class Returns:     parking_spot (None | ParkingSpot)</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def get_parking_spot(\n    self, entrance_panel_id: int, spot_type: ParkingSpotType, vehicle: Vehicle\n) -&gt; None | ParkingSpot:\n    \"\"\"Find parking spot\n    Args:\n        entrance_panel_id (int): Unique ID of entrance panel\n        spot_type (Enum): ParkingSpotType\n        vehicle (Vehicle): Instance of vehicle class\n    Returns:\n        parking_spot (None | ParkingSpot)\n    \"\"\"\n    parking_spot = None\n\n    # Acquire lock\n    with self._lock:\n        # If parking spots for this vehicle type is full, return None (no ticket assigned)\n        if not self._num_free_spots[spot_type]:\n            logger.info(f\"Parking Spots for {vehicle.vehicle_type} are full\")\n            return parking_spot\n\n        \"\"\"Get parking spot.\"\"\"\n        spot_id = self._find_parking_spot_strategy.find_parking_spot(\n            entrance_panel_id, spot_type, self._spots_free[spot_type]\n        )\n\n        # Get the parking spot for this spot_id\n        parking_spot = self._spots_free[spot_type][spot_id]\n        # Assign vehicle to this spot\n        parking_spot.assign_vehicle(vehicle=vehicle)\n\n        # Remove this spot from free spots and add it to occupied spots\n        self._spots_free[spot_type].pop(spot_id)\n        self._spots_occupied[spot_type][spot_id] = parking_spot\n        self._num_free_spots[spot_type] -= 1\n    # Release lock\n\n    return parking_spot\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.handle_vehicle_exit","title":"<code>handle_vehicle_exit(exit_panel_id, vehicle)</code>","text":"<p>Handle vehicle's exit Scan Ticket Accept Payment.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def handle_vehicle_exit(\n    self,\n    exit_panel_id: int,\n    vehicle: Vehicle,\n):\n    \"\"\"Handle vehicle's exit\n    Scan Ticket\n    Accept Payment.\n    \"\"\"\n\n    if exit_panel_id &gt;= len(self._exit_panels):\n        raise ValueError(\"exit_panel_id is out of bounds\")\n\n    # Scan ticket and handle payment\n    ticket = self._exit_panels[exit_panel_id].scan_ticket(\n        ticket=vehicle.ticket, rates=self._rates_per_sec\n    )\n    # Save ticket (in DB) for downstream analytics\n    self._tickets[ticket.ticket_id] = ticket\n\n    logger.info(\n        f\"Vehicle: Type: {ticket.vehicle_type}, Vehicle ID: {ticket.vehicle_id} at exit panel id:{exit_panel_id}\"\n    )\n\n    # Acquire lock\n    with self._lock:\n        # Remove this spot from occupied spots and add it to free spots\n        spot_id = ticket.spot_id\n        spot_type = ticket.spot_type\n        parking_spot = self._spots_occupied[spot_type][spot_id]\n        self._spots_occupied[spot_type].pop(spot_id)\n        self._spots_free[spot_type][spot_id] = parking_spot\n        self._num_free_spots[spot_type] += 1\n        self.notify_display_boards()\n\n        # Update list of free spots in find parking spot strategies\n        self._find_parking_spot_strategy.update_parking_spot(spot_id, spot_type)\n    # Release lock\n\n    logger.info(f\"Spot freed: {ticket.spot_type} with id:{ticket.spot_id}\")\n    logger.info(\n        f\"Ticket scanned, ID:{ticket.ticket_id}. Payment of {ticket.paid_amount} handled at {ticket.paid_at}\"\n    )\n\n    return\n</code></pre>"},{"location":"reference/parking_lot/src/parking_lot/#parking_lot.src.parking_lot.ParkingLot.notify_display_boards","title":"<code>notify_display_boards()</code>","text":"<p>Update display boards with number of free spot counts.</p> Source code in <code>parking_lot/src/parking_lot.py</code> <pre><code>def notify_display_boards(self):\n    \"\"\"Update display boards with number of free spot counts.\"\"\"\n    for i in range(len(self._display_boards)):\n        self._display_boards[i].update_num_free_spot_counts(self._num_free_spots)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/","title":"parking_spot","text":"<p>Module: Parking spot.</p>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.CompactSpot","title":"<code>CompactSpot</code>","text":"<p>               Bases: <code>ParkingSpot</code></p> <p>Class: Handicapped Parking Spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class CompactSpot(ParkingSpot):\n    \"\"\"Class: Handicapped Parking Spot.\"\"\"\n\n    def __init__(self, number: int):\n        \"\"\"Initialize handicapped parking spot.\"\"\"\n        super().__init__(number, ParkingSpotType.COMPACT)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.CompactSpot.__init__","title":"<code>__init__(number)</code>","text":"<p>Initialize handicapped parking spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def __init__(self, number: int):\n    \"\"\"Initialize handicapped parking spot.\"\"\"\n    super().__init__(number, ParkingSpotType.COMPACT)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.HandicappedSpot","title":"<code>HandicappedSpot</code>","text":"<p>               Bases: <code>ParkingSpot</code></p> <p>Class: Handicapped Parking Spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class HandicappedSpot(ParkingSpot):\n    \"\"\"Class: Handicapped Parking Spot.\"\"\"\n\n    def __init__(self, number: int):\n        \"\"\"Initialize handicapped parking spot.\"\"\"\n        super().__init__(number, ParkingSpotType.HANDICAPPED)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.HandicappedSpot.__init__","title":"<code>__init__(number)</code>","text":"<p>Initialize handicapped parking spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def __init__(self, number: int):\n    \"\"\"Initialize handicapped parking spot.\"\"\"\n    super().__init__(number, ParkingSpotType.HANDICAPPED)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.LargeSpot","title":"<code>LargeSpot</code>","text":"<p>               Bases: <code>ParkingSpot</code></p> <p>Class: Large Parking Spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class LargeSpot(ParkingSpot):\n    \"\"\"Class: Large Parking Spot.\"\"\"\n\n    def __init__(self, number: int):\n        \"\"\"Initialize large parking spot.\"\"\"\n        super().__init__(number, ParkingSpotType.LARGE)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.LargeSpot.__init__","title":"<code>__init__(number)</code>","text":"<p>Initialize large parking spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def __init__(self, number: int):\n    \"\"\"Initialize large parking spot.\"\"\"\n    super().__init__(number, ParkingSpotType.LARGE)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.MotorbikeSpot","title":"<code>MotorbikeSpot</code>","text":"<p>               Bases: <code>ParkingSpot</code></p> <p>Class: Motorbike Parking Spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class MotorbikeSpot(ParkingSpot):\n    \"\"\"Class: Motorbike Parking Spot.\"\"\"\n\n    def __init__(self, number: int):\n        \"\"\"Initialize motorbike parking spot.\"\"\"\n        super().__init__(number, ParkingSpotType.MOTORBIKE)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.MotorbikeSpot.__init__","title":"<code>__init__(number)</code>","text":"<p>Initialize motorbike parking spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def __init__(self, number: int):\n    \"\"\"Initialize motorbike parking spot.\"\"\"\n    super().__init__(number, ParkingSpotType.MOTORBIKE)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.ParkingSpot","title":"<code>ParkingSpot</code>","text":"<p>Class: Parking Spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class ParkingSpot:\n    \"\"\"Class: Parking Spot.\"\"\"\n\n    def __init__(self, floor: int, spot_id: int, spot_type: ParkingSpotType):\n        \"\"\"Initialize Vehicle instance.\n\n        Args:\n            floor (int): Floor number\n            spot_id (int): Parking spot number\n            spot_type (Enum): Parking spot type Enum\n        \"\"\"\n        self._floor = floor\n        self.spot_id = spot_id\n        self._free = True\n        self._vehicle = None\n        self.spot_type = spot_type\n\n    def assign_vehicle(self, vehicle: Vehicle):\n        \"\"\"Assign vehicle to parking spot.\n\n        Args:\n            vehicle (Vehicle): Vehicle Instance\n        \"\"\"\n        self._vehicle = vehicle\n        self._free = False\n\n    def remove_vehicle(self):\n        \"\"\"Remove vehicle from parking spot.\"\"\"\n        self._vehicle = None\n        self._free = True\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.ParkingSpot.__init__","title":"<code>__init__(floor, spot_id, spot_type)</code>","text":"<p>Initialize Vehicle instance.</p> <p>Parameters:</p> Name Type Description Default <code>floor</code> <code>int</code> <p>Floor number</p> required <code>spot_id</code> <code>int</code> <p>Parking spot number</p> required <code>spot_type</code> <code>Enum</code> <p>Parking spot type Enum</p> required Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def __init__(self, floor: int, spot_id: int, spot_type: ParkingSpotType):\n    \"\"\"Initialize Vehicle instance.\n\n    Args:\n        floor (int): Floor number\n        spot_id (int): Parking spot number\n        spot_type (Enum): Parking spot type Enum\n    \"\"\"\n    self._floor = floor\n    self.spot_id = spot_id\n    self._free = True\n    self._vehicle = None\n    self.spot_type = spot_type\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.ParkingSpot.assign_vehicle","title":"<code>assign_vehicle(vehicle)</code>","text":"<p>Assign vehicle to parking spot.</p> <p>Parameters:</p> Name Type Description Default <code>vehicle</code> <code>Vehicle</code> <p>Vehicle Instance</p> required Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def assign_vehicle(self, vehicle: Vehicle):\n    \"\"\"Assign vehicle to parking spot.\n\n    Args:\n        vehicle (Vehicle): Vehicle Instance\n    \"\"\"\n    self._vehicle = vehicle\n    self._free = False\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.ParkingSpot.remove_vehicle","title":"<code>remove_vehicle()</code>","text":"<p>Remove vehicle from parking spot.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>def remove_vehicle(self):\n    \"\"\"Remove vehicle from parking spot.\"\"\"\n    self._vehicle = None\n    self._free = True\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot/#parking_lot.src.parking_spot.ParkingSpotType","title":"<code>ParkingSpotType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of Parking Spots.</p> Source code in <code>parking_lot/src/parking_spot.py</code> <pre><code>class ParkingSpotType(Enum):\n    \"\"\"Types of Parking Spots.\"\"\"\n\n    HANDICAPPED = \"handicapped\"\n    COMPACT = \"compact\"\n    LARGE = \"large\"\n    MOTORBIKE = \"motorbike\"\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/","title":"parking_spot_strategy","text":"<p>Strategy: To find parking spot.</p>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindNearestSpotStrategy","title":"<code>FindNearestSpotStrategy</code>","text":"<p>               Bases: <code>FindParkingSpotStrategy</code></p> <p>Derived Class: Implements finding nearest free parking spot.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>class FindNearestSpotStrategy(FindParkingSpotStrategy):\n    \"\"\"Derived Class: Implements finding nearest free parking spot.\"\"\"\n\n    def __init__(\n        self, entrance_panels: dict[int, EntrancePanel], free_spots, parking_spot_counts\n    ):\n        \"\"\"Initalize instance of nearest parking spot strategy.\"\"\"\n        # Create min heaps of free parking spots for each of the entrance panels\n        self.pq = {}\n        self._lock = threading.Lock()\n        for entrance_id, _ in entrance_panels.items():\n            self.pq[entrance_id] = {}\n            for spot_type in parking_spot_counts:\n                self.pq[entrance_id][spot_type] = []\n                for spot_id in free_spots[spot_type].keys():\n                    # Simulate different orders of allotment at different entrances\n                    # For odd numbered entrances, allot in decreasing order\n                    if entrance_id % 2:\n                        heapq.heappush(\n                            self.pq[entrance_id][spot_type],\n                            -spot_id,\n                        )\n                    # For even numbered entrances, allot in increasing order\n                    else:\n                        heapq.heappush(\n                            self.pq[entrance_id][spot_type],\n                            spot_id,\n                        )\n\n    def find_parking_spot(\n        self,\n        entrance_panel_id: int,\n        spot_type: ParkingSpotType,\n        free_spots: dict[ParkingSpot],\n    ) -&gt; int:\n        \"\"\"Find spot nearest to entrance.\n        Running Time: O(|Num_Entrances|)\n        \"\"\"\n        with self._lock:\n            # Top of min heap is the nearest spot to entrance\n            nearest_spot_id = self.pq[entrance_panel_id][spot_type][0]\n            nearest_spot_id = abs(nearest_spot_id)\n\n            # Remove this occupied spot from priority queue of all entrances\n            for entrance_id in self.pq:\n                if entrance_id % 2:\n                    self.pq[entrance_id][spot_type].remove(-nearest_spot_id)\n                else:\n                    self.pq[entrance_id][spot_type].remove(nearest_spot_id)\n\n        return nearest_spot_id\n\n    def update_parking_spot(self, spot_id: int, spot_type: ParkingSpotType):\n        \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n        # Add this free spot to priority queue of all entrances\n        with self._lock:\n            for entrance_id in self.pq:\n                if entrance_id % 2:\n                    self.pq[entrance_id][spot_type].append(-spot_id)\n                else:\n                    self.pq[entrance_id][spot_type].append(spot_id)\n\n    def __str__(self):\n        return f\"Find Nearest Spot Strategy\"\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindNearestSpotStrategy.__init__","title":"<code>__init__(entrance_panels, free_spots, parking_spot_counts)</code>","text":"<p>Initalize instance of nearest parking spot strategy.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>def __init__(\n    self, entrance_panels: dict[int, EntrancePanel], free_spots, parking_spot_counts\n):\n    \"\"\"Initalize instance of nearest parking spot strategy.\"\"\"\n    # Create min heaps of free parking spots for each of the entrance panels\n    self.pq = {}\n    self._lock = threading.Lock()\n    for entrance_id, _ in entrance_panels.items():\n        self.pq[entrance_id] = {}\n        for spot_type in parking_spot_counts:\n            self.pq[entrance_id][spot_type] = []\n            for spot_id in free_spots[spot_type].keys():\n                # Simulate different orders of allotment at different entrances\n                # For odd numbered entrances, allot in decreasing order\n                if entrance_id % 2:\n                    heapq.heappush(\n                        self.pq[entrance_id][spot_type],\n                        -spot_id,\n                    )\n                # For even numbered entrances, allot in increasing order\n                else:\n                    heapq.heappush(\n                        self.pq[entrance_id][spot_type],\n                        spot_id,\n                    )\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindNearestSpotStrategy.find_parking_spot","title":"<code>find_parking_spot(entrance_panel_id, spot_type, free_spots)</code>","text":"<p>Find spot nearest to entrance. Running Time: O(|Num_Entrances|)</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>def find_parking_spot(\n    self,\n    entrance_panel_id: int,\n    spot_type: ParkingSpotType,\n    free_spots: dict[ParkingSpot],\n) -&gt; int:\n    \"\"\"Find spot nearest to entrance.\n    Running Time: O(|Num_Entrances|)\n    \"\"\"\n    with self._lock:\n        # Top of min heap is the nearest spot to entrance\n        nearest_spot_id = self.pq[entrance_panel_id][spot_type][0]\n        nearest_spot_id = abs(nearest_spot_id)\n\n        # Remove this occupied spot from priority queue of all entrances\n        for entrance_id in self.pq:\n            if entrance_id % 2:\n                self.pq[entrance_id][spot_type].remove(-nearest_spot_id)\n            else:\n                self.pq[entrance_id][spot_type].remove(nearest_spot_id)\n\n    return nearest_spot_id\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindNearestSpotStrategy.update_parking_spot","title":"<code>update_parking_spot(spot_id, spot_type)</code>","text":"<p>Update list of free spots on each vehicle's exit.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>def update_parking_spot(self, spot_id: int, spot_type: ParkingSpotType):\n    \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n    # Add this free spot to priority queue of all entrances\n    with self._lock:\n        for entrance_id in self.pq:\n            if entrance_id % 2:\n                self.pq[entrance_id][spot_type].append(-spot_id)\n            else:\n                self.pq[entrance_id][spot_type].append(spot_id)\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindParkingSpotStrategy","title":"<code>FindParkingSpotStrategy</code>","text":"<p>Base Class: to find parking spot.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>class FindParkingSpotStrategy:\n    \"\"\"Base Class: to find parking spot.\"\"\"\n\n    @abstractmethod\n    def find_parking_spot(\n        self,\n        entrance_panel_id: int,\n        spot_type: ParkingSpotType,\n        free_spots: dict[ParkingSpot],\n    ) -&gt; int:\n        \"\"\"Find parking spot.\"\"\"\n        pass\n\n    @abstractmethod\n    def update_parking_spot_on_exit(self):\n        \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n        pass\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindParkingSpotStrategy.find_parking_spot","title":"<code>find_parking_spot(entrance_panel_id, spot_type, free_spots)</code>  <code>abstractmethod</code>","text":"<p>Find parking spot.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>@abstractmethod\ndef find_parking_spot(\n    self,\n    entrance_panel_id: int,\n    spot_type: ParkingSpotType,\n    free_spots: dict[ParkingSpot],\n) -&gt; int:\n    \"\"\"Find parking spot.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindParkingSpotStrategy.update_parking_spot_on_exit","title":"<code>update_parking_spot_on_exit()</code>  <code>abstractmethod</code>","text":"<p>Update list of free spots on each vehicle's exit.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>@abstractmethod\ndef update_parking_spot_on_exit(self):\n    \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindRandomSpotStrategy","title":"<code>FindRandomSpotStrategy</code>","text":"<p>               Bases: <code>FindParkingSpotStrategy</code></p> <p>Derived Class: Implements finding random free parking spot.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>class FindRandomSpotStrategy(FindParkingSpotStrategy):\n    \"\"\"Derived Class: Implements finding random free parking spot.\"\"\"\n\n    def find_parking_spot(\n        self,\n        entrance_panel_id: int,\n        spot_type: ParkingSpotType,\n        free_spots: dict[ParkingSpot],\n    ) -&gt; int:\n        \"\"\"Find the first free parking spot.\"\"\"\n        random_spot_id = random.choice(list(free_spots.keys()))\n        return random_spot_id\n\n    def update_parking_spot_on_exit(self):\n        \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n        return\n\n    def __str__(self):\n        return f\"Find Random Spot Strategy\"\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindRandomSpotStrategy.find_parking_spot","title":"<code>find_parking_spot(entrance_panel_id, spot_type, free_spots)</code>","text":"<p>Find the first free parking spot.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>def find_parking_spot(\n    self,\n    entrance_panel_id: int,\n    spot_type: ParkingSpotType,\n    free_spots: dict[ParkingSpot],\n) -&gt; int:\n    \"\"\"Find the first free parking spot.\"\"\"\n    random_spot_id = random.choice(list(free_spots.keys()))\n    return random_spot_id\n</code></pre>"},{"location":"reference/parking_lot/src/parking_spot_strategy/#parking_lot.src.parking_spot_strategy.FindRandomSpotStrategy.update_parking_spot_on_exit","title":"<code>update_parking_spot_on_exit()</code>","text":"<p>Update list of free spots on each vehicle's exit.</p> Source code in <code>parking_lot/src/parking_spot_strategy.py</code> <pre><code>def update_parking_spot_on_exit(self):\n    \"\"\"Update list of free spots on each vehicle's exit.\"\"\"\n    return\n</code></pre>"},{"location":"reference/parking_lot/src/parking_ticket/","title":"parking_ticket","text":"<p>Module: Parking Ticket.</p>"},{"location":"reference/parking_lot/src/parking_ticket/#parking_lot.src.parking_ticket.ParkingTicket","title":"<code>ParkingTicket</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class: Parking Ticket.</p> Source code in <code>parking_lot/src/parking_ticket.py</code> <pre><code>class ParkingTicket(BaseModel):\n    \"\"\"Class: Parking Ticket.\"\"\"\n\n    ticket_id: UUID = uuid4()\n    entrance_id: int\n    spot_id: int\n    spot_type: ParkingSpotType\n    vehicle_id: int\n    vehicle_type: vehicle.VehicleType\n    issued_at: datetime\n    paid_at: datetime | None\n    exit_id: int | None\n    status: ParkingTicketStatus\n    paid_amount: float | None\n</code></pre>"},{"location":"reference/parking_lot/src/parking_ticket/#parking_lot.src.parking_ticket.ParkingTicketStatus","title":"<code>ParkingTicketStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum: ParkingTicketStatus.</p> Source code in <code>parking_lot/src/parking_ticket.py</code> <pre><code>class ParkingTicketStatus(Enum):\n    \"\"\"Enum: ParkingTicketStatus.\"\"\"\n\n    UNPAID = \"unpaid\"\n    PAID = \"paid\"\n    LOST = \"lost\"\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/","title":"vehicle","text":"<p>Module: Vehicle and vehicle types.</p>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Car","title":"<code>Car</code>","text":"<p>               Bases: <code>Vehicle</code></p> <p>Class: Car.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class Car(Vehicle):\n    \"\"\"Class: Car.\"\"\"\n\n    def __init__(self, vehicle_id: int):\n        super().__init__(vehicle_id, VehicleType.CAR)\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Factory","title":"<code>Factory</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Class: Factory to create vehicle instances.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class Factory(ABC):\n    \"\"\"Class: Factory to create vehicle instances.\"\"\"\n\n    @abstractmethod\n    def factory_method(self, vehicle_id) -&gt; Vehicle:\n        pass\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Motorbike","title":"<code>Motorbike</code>","text":"<p>               Bases: <code>Vehicle</code></p> <p>Class: Motorbike.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class Motorbike(Vehicle):\n    \"\"\"Class: Motorbike.\"\"\"\n\n    def __init__(self, vehicle_id: int):\n        super().__init__(vehicle_id, VehicleType.MOTORBIKE)\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Truck","title":"<code>Truck</code>","text":"<p>               Bases: <code>Vehicle</code></p> <p>Class: Truck.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class Truck(Vehicle):\n    \"\"\"Class: Truck.\"\"\"\n\n    def __init__(self, vehicle_id: int):\n        super().__init__(vehicle_id, VehicleType.TRUCK)\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Vehicle","title":"<code>Vehicle</code>","text":"<p>Class: Vehicle.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class Vehicle:\n    \"\"\"Class: Vehicle.\"\"\"\n\n    def __init__(self, vehicle_id: int, vehicle_type: VehicleType):\n        \"\"\"Initializes Vehicle instance\n\n        Args:\n            vehicle_id (int): Unique identifier of vehicle\n            vehicle_type (Enum): Vehicle type Enum\n        \"\"\"\n        self.vehicle_id = vehicle_id\n        self.vehicle_type = vehicle_type\n        self.ticket = None\n\n    def __str__(self):\n        class_name = type(self).__name__\n        return f\"{class_name}(vehicle_id={self.vehicle_id}, vehicle_type={self.vehicle_type})\"\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.Vehicle.__init__","title":"<code>__init__(vehicle_id, vehicle_type)</code>","text":"<p>Initializes Vehicle instance</p> <p>Parameters:</p> Name Type Description Default <code>vehicle_id</code> <code>int</code> <p>Unique identifier of vehicle</p> required <code>vehicle_type</code> <code>Enum</code> <p>Vehicle type Enum</p> required Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>def __init__(self, vehicle_id: int, vehicle_type: VehicleType):\n    \"\"\"Initializes Vehicle instance\n\n    Args:\n        vehicle_id (int): Unique identifier of vehicle\n        vehicle_type (Enum): Vehicle type Enum\n    \"\"\"\n    self.vehicle_id = vehicle_id\n    self.vehicle_type = vehicle_type\n    self.ticket = None\n</code></pre>"},{"location":"reference/parking_lot/src/vehicle/#parking_lot.src.vehicle.VehicleType","title":"<code>VehicleType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Types of vehicles.</p> Source code in <code>parking_lot/src/vehicle.py</code> <pre><code>class VehicleType(str, Enum):\n    \"\"\"Types of vehicles.\"\"\"\n\n    CAR = \"car\"\n    TRUCK = \"truck\"\n    MOTORBIKE = \"motorbike\"\n</code></pre>"},{"location":"reference/parking_lot/tests/","title":"tests","text":""},{"location":"reference/parking_lot/tests/test_parkinglot/","title":"test_parkinglot","text":"<p>Test Parking lot's vehicle entry and exit scenarios.</p>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestNearestSpotAssigned","title":"<code>TestNearestSpotAssigned</code>","text":"<p>Test Case: to verify if nearest spot to entrance is assigned</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>@pytest.mark.parametrize(\"num_vehicles, num_spots\", [(2, 2)], indirect=True)\nclass TestNearestSpotAssigned:\n    \"\"\"Test Case: to verify if nearest spot to entrance is assigned\"\"\"\n\n    def test_nearest_spots_assigned(\n        self, num_spots, parking_lot, vehicles, park_vehicles\n    ):\n        \"\"\"Two vehicles should be issued spots at two ends of spots, closest to entry\"\"\"\n        park_vehicles(parking_lot, vehicles)\n        assert (\n            vehicles[0].ticket.spot_id is 0\n            and vehicles[1].ticket.spot_id is num_spots - 1\n        ) or (\n            vehicles[1].ticket.spot_id is 0\n            and vehicles[0].ticket.spot_id is num_spots - 1\n        )\n\n    def test_num_free_spots_after_vehicle_entrance(\n        self, num_vehicles, num_spots, parking_lot\n    ):\n        \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n        spot_type = ParkingSpotType.COMPACT\n        assert parking_lot._num_free_spots[spot_type] == num_spots - num_vehicles\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestNearestSpotAssigned.test_nearest_spots_assigned","title":"<code>test_nearest_spots_assigned(num_spots, parking_lot, vehicles, park_vehicles)</code>","text":"<p>Two vehicles should be issued spots at two ends of spots, closest to entry</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_nearest_spots_assigned(\n    self, num_spots, parking_lot, vehicles, park_vehicles\n):\n    \"\"\"Two vehicles should be issued spots at two ends of spots, closest to entry\"\"\"\n    park_vehicles(parking_lot, vehicles)\n    assert (\n        vehicles[0].ticket.spot_id is 0\n        and vehicles[1].ticket.spot_id is num_spots - 1\n    ) or (\n        vehicles[1].ticket.spot_id is 0\n        and vehicles[0].ticket.spot_id is num_spots - 1\n    )\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestNearestSpotAssigned.test_num_free_spots_after_vehicle_entrance","title":"<code>test_num_free_spots_after_vehicle_entrance(num_vehicles, num_spots, parking_lot)</code>","text":"<p>Unit Test to verify number of free spots is updated after vehicle's entry.</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_num_free_spots_after_vehicle_entrance(\n    self, num_vehicles, num_spots, parking_lot\n):\n    \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n    spot_type = ParkingSpotType.COMPACT\n    assert parking_lot._num_free_spots[spot_type] == num_spots - num_vehicles\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleNoSpotAvailable","title":"<code>TestOneVehicleNoSpotAvailable</code>","text":"<p>Test Case: to verify vehicle entry denial if no spot is available</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>@pytest.mark.parametrize(\"num_vehicles, num_spots\", [(1, 0)], indirect=True)\nclass TestOneVehicleNoSpotAvailable:\n    \"\"\"Test Case: to verify vehicle entry denial if no spot is available\"\"\"\n\n    def test_vehicle_entry_denied(self, parking_lot, vehicles, park_vehicles):\n        \"\"\"Unit test to verify vehicle entry is denied when no spot is available\"\"\"\n        park_vehicles(parking_lot, vehicles)\n        assert vehicles[0].ticket is None\n\n    def test_num_free_spots_after_vehicle_entrance(\n        self, num_vehicles, num_spots, parking_lot\n    ):\n        \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n        spot_type = ParkingSpotType.COMPACT\n        assert parking_lot._num_free_spots[spot_type] == num_spots\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleNoSpotAvailable.test_num_free_spots_after_vehicle_entrance","title":"<code>test_num_free_spots_after_vehicle_entrance(num_vehicles, num_spots, parking_lot)</code>","text":"<p>Unit Test to verify number of free spots is updated after vehicle's entry.</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_num_free_spots_after_vehicle_entrance(\n    self, num_vehicles, num_spots, parking_lot\n):\n    \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n    spot_type = ParkingSpotType.COMPACT\n    assert parking_lot._num_free_spots[spot_type] == num_spots\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleNoSpotAvailable.test_vehicle_entry_denied","title":"<code>test_vehicle_entry_denied(parking_lot, vehicles, park_vehicles)</code>","text":"<p>Unit test to verify vehicle entry is denied when no spot is available</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_vehicle_entry_denied(self, parking_lot, vehicles, park_vehicles):\n    \"\"\"Unit test to verify vehicle entry is denied when no spot is available\"\"\"\n    park_vehicles(parking_lot, vehicles)\n    assert vehicles[0].ticket is None\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleSpotAvailable","title":"<code>TestOneVehicleSpotAvailable</code>","text":"<p>Tests: 1. Ticket issued to vehicle entry with spot available. 2. Number of free spots reduces by 1.</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>@pytest.mark.parametrize(\"num_vehicles, num_spots\", [(1, 1), (2, 2)], indirect=True)\nclass TestOneVehicleSpotAvailable:\n    \"\"\"Tests:\n    1. Ticket issued to vehicle entry with spot available.\n    2. Number of free spots reduces by 1.\n    \"\"\"\n\n    def test_vehicle_ticket_issued(self, parking_lot, vehicles, park_vehicles):\n        \"\"\"Unit test to verify vehicle entry when spot is available\"\"\"\n        park_vehicles(parking_lot, vehicles)\n        assert vehicles[0].ticket is not None\n\n    def test_num_free_spots_after_vehicle_entrance(\n        self, num_vehicles, num_spots, parking_lot\n    ):\n        \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n        spot_type = ParkingSpotType.COMPACT\n        assert parking_lot._num_free_spots[spot_type] == num_spots - num_vehicles\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleSpotAvailable.test_num_free_spots_after_vehicle_entrance","title":"<code>test_num_free_spots_after_vehicle_entrance(num_vehicles, num_spots, parking_lot)</code>","text":"<p>Unit Test to verify number of free spots is updated after vehicle's entry.</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_num_free_spots_after_vehicle_entrance(\n    self, num_vehicles, num_spots, parking_lot\n):\n    \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n    spot_type = ParkingSpotType.COMPACT\n    assert parking_lot._num_free_spots[spot_type] == num_spots - num_vehicles\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestOneVehicleSpotAvailable.test_vehicle_ticket_issued","title":"<code>test_vehicle_ticket_issued(parking_lot, vehicles, park_vehicles)</code>","text":"<p>Unit test to verify vehicle entry when spot is available</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_vehicle_ticket_issued(self, parking_lot, vehicles, park_vehicles):\n    \"\"\"Unit test to verify vehicle entry when spot is available\"\"\"\n    park_vehicles(parking_lot, vehicles)\n    assert vehicles[0].ticket is not None\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestTwoVehicleOneSpotAvailable","title":"<code>TestTwoVehicleOneSpotAvailable</code>","text":"<p>Test Case: to verify 2 vehicles entry concurrently</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>@pytest.mark.parametrize(\"num_vehicles, num_spots\", [(2, 1)], indirect=True)\nclass TestTwoVehicleOneSpotAvailable:\n    \"\"\"Test Case: to verify 2 vehicles entry concurrently\"\"\"\n\n    def test_vehicle_entry_denied(self, parking_lot, vehicles, park_vehicles):\n        \"\"\"One vehicle should be issued ticket, other should be denied entry\"\"\"\n        park_vehicles(parking_lot, vehicles)\n        assert (vehicles[0].ticket is None and vehicles[1].ticket is not None) or (\n            vehicles[1].ticket is None and vehicles[0].ticket is not None\n        )\n\n    def test_num_free_spots_after_vehicle_entrance(\n        self, num_vehicles, num_spots, parking_lot\n    ):\n        \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n        spot_type = ParkingSpotType.COMPACT\n        assert parking_lot._num_free_spots[spot_type] == num_spots - (num_vehicles - 1)\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestTwoVehicleOneSpotAvailable.test_num_free_spots_after_vehicle_entrance","title":"<code>test_num_free_spots_after_vehicle_entrance(num_vehicles, num_spots, parking_lot)</code>","text":"<p>Unit Test to verify number of free spots is updated after vehicle's entry.</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_num_free_spots_after_vehicle_entrance(\n    self, num_vehicles, num_spots, parking_lot\n):\n    \"\"\"Unit Test to verify number of free spots is updated after vehicle's entry.\"\"\"\n    spot_type = ParkingSpotType.COMPACT\n    assert parking_lot._num_free_spots[spot_type] == num_spots - (num_vehicles - 1)\n</code></pre>"},{"location":"reference/parking_lot/tests/test_parkinglot/#parking_lot.tests.test_parkinglot.TestTwoVehicleOneSpotAvailable.test_vehicle_entry_denied","title":"<code>test_vehicle_entry_denied(parking_lot, vehicles, park_vehicles)</code>","text":"<p>One vehicle should be issued ticket, other should be denied entry</p> Source code in <code>parking_lot/tests/test_parkinglot.py</code> <pre><code>def test_vehicle_entry_denied(self, parking_lot, vehicles, park_vehicles):\n    \"\"\"One vehicle should be issued ticket, other should be denied entry\"\"\"\n    park_vehicles(parking_lot, vehicles)\n    assert (vehicles[0].ticket is None and vehicles[1].ticket is not None) or (\n        vehicles[1].ticket is None and vehicles[0].ticket is not None\n    )\n</code></pre>"}]}